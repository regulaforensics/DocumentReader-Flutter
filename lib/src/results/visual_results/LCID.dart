//
//  LCID.dart
//  DocumentReader
//
//  Created by Pavel Masiuk on 21.09.2023.
//  Copyright Â© 2023 Regula. All rights reserved.
//

part of "../../../flutter_document_reader_api.dart";

/// Enumeration contains a language ID that identifies a particular language.
enum LCID {
  /// Will be returned if [getByValue] if a non-existent was passed.
  UNKNOWN(-1),
  LATIN(0),
  ABKHAZIAN_CYRILLIC(10011),
  AFRIKAANS(1078),
  ALBANIAN(1052),
  AMHARIC(1118),
  ARABIC_ALGERIA(5121),
  ARABIC_BAHRAIN(15361),
  ARABIC_EGYPT(3073),
  ARABIC_IRAQ(2049),
  ARABIC_JORDAN(11265),
  ARABIC_KUWAIT(13313),
  ARABIC_LEBANON(12289),
  ARABIC_LIBYA(4097),
  ARABIC_MOROCCO(6145),
  ARABIC_OMAN(8193),
  ARABIC_QATAR(16385),
  ARABIC_SAUDI_ARABIA(1025),
  ARABIC_SYRIA(10241),
  ARABIC_TUNISIA(7169),
  ARABIC_UAE(14337),
  ARABIC_YEMEN(9217),
  ARABIC_ARMENIAN(1067),
  ARABIC_WORLD(4096),
  AZERI_CYRILIC(2092),
  AZERI_LATIN(1068),
  ASSAMESE(1101),
  BASQUE(1069),
  BANK_CARD(10003),
  BANK_CARD_CVV2(10004),
  BANK_CARD_NAME(10002),
  BANK_CARD_NUMBER(10000),
  BANK_CARD_VALID_THRU(10001),
  BELARUSIAN(1059),
  BENGALI_BANGLADESH(2117),
  BENGALI_INDIA(1093),
  BULGARIAN(1026),
  CATALAN(1027),
  CHINESE_HONGKONG_SAR(3076),
  CHINESE_MACAO_SAR(5124),
  CHINESE(2052),
  CHINESE_SINGAPORE(4100),
  CHINESE_TAIWAN(1028),
  CROATIAN(1050),
  CZECH(1029),
  DANISH(1030),
  DIVEHI(1125),
  DUTCH_BELGIUM(2067),
  DUTCH_NETHERLANDS(1043),
  ENGLISH_AUSTRALIA(3081),
  ENGLISH_BELIZE(10249),
  ENGLISH_CANADA(4105),
  ENGLISH_CARRIBEAN(9225),
  ENGLISH_IRELAND(6153),
  ENGLISH_JAMAICA(8201),
  ENGLISH_NEW_ZEALAND(5129),
  ENGLISH_PHILIPPINES(13321),
  ENGLISH_SOUTH_AFRICA(7177),
  ENGLISH_TRINIDAD(11273),
  ENGLISH_UK(2057),
  ENGLISH_US(1033),
  ENGLISH_ZIMBABWE(12297),
  ESTONIAN(1061),
  FAEROESE(1080),
  FARSI(1065),
  FINNISH(1035),
  FRENCH_BELGIUM(2060),
  FRENCH_CANADA(3084),
  FRENCH_FRANCE(1036),
  FRENCH_LUXEMBOURG(5132),
  FRENCH_MONACO(6156),
  FRENCH_SWITZERLAND(4108),
  FYRO_MACEDONIAN(1071),
  GALICIAN(1110),
  GEORGIAN(1079),
  GERMAN_AUSTRIA(3079),
  GERMAN_GERMANY(1031),
  GERMAN_LIECHTENSTEIN(5127),
  GERMAN_LUXEMBOURG(4103),
  GERMAN_SWITZERLAND(2055),
  GREEK(1032),
  GUJARATI(1095),
  HEBREW(1037),
  HINDI_INDIA(1081),
  HUNGARIAN(1038),
  ICELANDIC(1039),
  INDONESIAN(1057),
  ITALIAN_ITALY(1040),
  ITALIAN_SWITZERLAND(2064),
  JAPANESE(1041),
  KANNADA(1099),
  KASHMIRI(1120),
  KAZAKH(1087),
  KONKANI(1111),
  KOREAN(1042),
  KYRGYZ_CYRILICK(1088),
  LAO(1108),
  LATVIAN(1062),
  LITHUANIAN(1063),
  MALAY_MALAYSIA(1086),
  MALAY_BRUNEI_DARUSSALAM(2110),
  MARATHI(1102),
  MONGOLIAN_CYRILIC(1104),
  NORWEGIAN_BOKMAL(1044),
  NORWEGIAN_NYORSK(2068),
  PASHTO(1123),
  POLISH(1045),
  PORTUGUESE_BRAZIL(1046),
  PORTUGUESE_PORTUGAL(2070),
  PUNJABI(1094),
  RHAETO_ROMANIC(1047),
  ROMANIAN(1048),
  RUSSIAN(1049),
  SANSKRIT(1103),
  SERBIAN_CYRILIC(3098),
  SERBIAN_LATIN(2074),
  SINDHI(2137),
  SINDHI_INDIA(1113),
  SINHALA(1115),
  SLOVAK(1051),
  SLOVENIAN(1060),
  SPANISH_ARGENTINA(11274),
  SPANISH_BOLIVIA(16394),
  SPANISH_CHILE(13322),
  SPANICH_COLOMBIA(9226),
  SPANISH_COSTA_RICA(5130),
  SPANISH_DOMINICAN_REPUBLIC(7178),
  SPANISH_ECUADOR(12298),
  SPANISH_EL_SALVADOR(17418),
  SPANISH_GUATEMALA(4106),
  SPANISH_HONDURAS(18442),
  SPANISH_MEXICO(2058),
  SPANISH_NICARAGUA(19466),
  SPANISH_PANAMA(6154),
  SPANISH_PARAGUAY(15370),
  SPANISH_PERU(10250),
  SPANISH_PUERTO_RICO(20490),
  SPANISH_TRADITIONAL_SORT(1034),
  SPANISH_INTERNATIONAL_SORT(3082),
  SPANISH_URUGUAY(14346),
  SPANISH_VENEZUELA(8202),
  SWAHILI(1089),
  SWEDISH(1053),
  SWEDISH_FINLAND(2077),
  SYRIAC(1114),
  TAMIL(1097),
  TATAR(1092),
  TELUGU(1098),
  THAI_THAILAND(1054),
  TURKISH(1055),
  TAJIK_CYRILLIC(1064),
  TURKMEN(1090),
  UKRAINIAN(1058),
  URDU(1056),
  UZBEK_CYRILIC(2115),
  UZBEK_LATIN(1091),
  VIETNAMESE(1066),
  CTC_SIMPLIFIED(50001),
  CTC_TRADITIONAL(50002),
  MALTESE(1082),
  BURMESE(1109),
  KHMER(1107),
  KARAKALPAK_LATIN(10012),
  MALAYALAM(1100),
  NEPALI(1121),
  ORIYA(1096),
  URDU_DETECTION(10560);

  const LCID(this.value);
  final int value;

  Future<String> getTranslation() async {
    return await _bridge
        .invokeMethod("getTranslation", [runtimeType.toString(), value]);
  }

  static LCID? getByValue(int? i) {
    if (i == null) return null;
    try {
      return LCID.values.firstWhere((x) => x.value == i);
    } catch (_) {
      return LCID.UNKNOWN;
    }
  }

  static List<LCID>? fromIntList(List<dynamic>? input) {
    if (input == null) return null;
    List<LCID> list = [];
    for (int item in input) {
      list.addSafe(getByValue(item));
    }
    return list;
  }
}
