//
//  LDSParsingErrorCodes.dart
//  DocumentReader
//
//  Created by Pavel Masiuk on 21.09.2023.
//  Copyright Â© 2023 Regula. All rights reserved.
//

part of document_reader;

enum LDSParsingErrorCodes {
  /// Will be returned if [getByValue] if a non-existent was passed.
  UNKNOWN(-1),
  OK(0x00000001),
  ASN_INCORRECT_DATA(0x80000001),
  ASN_NOT_ENOUGH_DATA(0x80000002),
  ASN_CONTENTS_UNEXPECTED_DATA(0x80000003),
  ASN_SIGNED_DATA_INCORRECT_DATA(0x80000008),
  ASN_SIGNED_DATA_ENCAP_CONTENTS_INCORRECT_DATA(0x80000009),
  ASN_SIGNED_DATA_VERSION_INCORRECT_DATA(0x8000000A),
  ASN_SIGNED_DATA_DIGEST_ALGORITHMS_INCORRECT_DATA(0x80000011),
  ASN_LDS_OBJECT_INCORRECT_DATA(0x80000013),
  ASN_LDS_OBJECT_VERSION_INCORRECT_DATA(0x80000014),
  ASN_LDS_OBJECT_DIGEST_ALGORITHM_INCORRECT_DATA(0x80000015),
  ASN_LDS_OBJECT_DG_HASHES_INCORRECT_DATA(0x80000016),
  ASN_LDS_OBJECT_VERSION_INFO_INCORRECT_DATA(0x80000012),
  ASN_CERTIFICATE_INCORRECT_DATA(0x80000017),
  ASN_CERTIFICATE_VERSION_INCORRECT_DATA(0x80000018),
  ASN_CERTIFICATE_SN_INCORRECT_DATA(0x80000019),
  ASN_CERTIFICATE_SIGNATURE_INCORRECT_DATA(0x8000001A),
  ASN_CERTIFICATE_ISSUER_INCORRECT_DATA(0x8000001B),
  ASN_CERTIFICATE_VALIDITY_INCORRECT_DATA(0x8000001C),
  ASN_CERTIFICATE_SUBJECT_INCORRECT_DATA(0x8000001D),
  ASN_CERTIFICATE_SUBJECT_PK_INCORRECT_DATA(0x8000001E),
  ASN_CERTIFICATE_EXTENSIONS_INCORRECT_DATA(0x8000001F),
  ASN_SIGNER_INFO_INCORRECT_DATA(0x80000020),
  ASN_SIGNER_INFO_VERSION_INCORRECT_DATA(0x80000021),
  ASN_SIGNER_INFO_SID_INCORRECT_DATA(0x80000022),
  ASN_SIGNER_INFO_DIGEST_ALG_INCORRECT_DATA(0x80000023),
  ASN_SIGNER_INFO_SIGNED_ATTRS_INCORRECT_DATA(0x80000024),
  ASN_SIGNER_INFO_SIGN_ALG_INCORRECT_DATA(0x80000025),
  ASN_SIGNER_INFO_SIGNATURE_INCORRECT_DATA(0x80000026),
  ASN_SIGNER_INFO_UNSIGNED_ATTRS_INCORRECT_DATA(0x80000027),
  ICAO_LDS_OBJECT_UNSUPPORTED_DIGEST_ALGORITHM(0x80000030),
  ICAO_SIGNED_DATA_SIGNER_INFOS_EMPTY(0x80000031),
  ICAO_SIGNER_INFO_UNSUPPORTED_DIGEST_ALGORITHM(0x80000032),
  ICAO_SIGNER_INFO_UNSUPPORTED_SIGNATURE_ALGORITHM(0x80000033),
  ICAO_SIGNER_INFO_MESSAGE_DIGEST_ERROR(0x80000034),
  ICAO_SIGNER_INFO_SIGNED_ATTRS_MISSED(0x80000036),
  AUTH_SIGNER_INFO_CANT_FIND_CERTIFICATE(0x80000035),
  AUTH_ERROR(0x80000050),
  AUTH_UNSUPPORTED_SIGNATURE_ALGORITHM(0x80000051),
  AUTH_UNSUPPORTED_PUBLIC_KEY_ALGORITHM(0x80000052),
  AUTH_MESSED_ALGORITHMS(0x80000053),
  AUTH_PUBLIC_KEY_DATA_INVALID(0x80000054),
  AUTH_ALGORITHM_PARAMETERS_DATA_INVALID(0x80000055),
  AUTH_SIGNATURE_DATA_INVALID(0x80000056),
  AUTH_UNSUPPORTED_DIGEST_ALGORITHM(0x80000057),
  AUTH_SIGNATURE_DATA_INCORRECT(0x80000058),
  AUTH_ALGORITHM_PARAMETERS_NOT_DEFINED(0x80000059),
  AUTH_SIGNATURE_CHECK_FAILED(0x8000005A),
  DG_WRONG_TAH(0x80000070),
  DG_CONTENTS_UNEXPECTED_DATA(0x80000071),
  BAP_SYMMETRIC_CYPHER_CANT_INITIALIZE(0x81000011),
  PACE_INFO_NOT_AVAILABLE(0x81000020),
  PACE_SYMMETRIC_CYPHER_CANT_INITIALIZE(0x81000021),
  PACE_KEY_AGREEMENT_CANT_INITIALIZE(0x81000022),
  PACE_EPHEMERAL_KEYS_CANT_CREATE(0x81000023),
  PACE_MAPPING_CANT_DECODE_NONCE(0x81000024),
  PACE_SHARED_SECRET_CANT_CREATE(0x81000025),
  PACE_DOMAIN_PARAMS_UNSUPPORTED_FORMAT(0x81000026),
  PACE_EPHEMERAL_KEYS_INCORRECT(0x81000027),
  PACE_MAPPING_EPHEMERAL_KEYS_INCORRECT(0x81000028),
  PACE_MAPPING_CANT_PERFORM(0x81000029),
  PACE_NON_MATCHING_AUTH_TOKENS(0x8100002A),
  PACE_CAM_DATA_INCORRECT(0x8100002B),
  PACE_CAM_DATA_CANT_VERIFY(0x8100002C),
  PACE_CAM_DATA_NON_MATCHING(0x8100002D),
  PACE_IM_SCHEME_INCORRECT(0x8100002E),
  PACE_IM_RANDOM_MAPPING_FAILED(0x8100002F),
  CA_CANT_FIND_PUBLIC_KEY(0x81000030),
  CA_CANT_FIND_INFO(0x81000031),
  CA_INCORRECT_VERSION(0x81000032),
  CA_CANT_FIND_DOMAIN_PARAMETERS(0x81000033),
  CA_KEY_AGREEMENT_CANT_INITIALIZE(0x81000034),
  CA_PUBLIC_KEY_UNSUPPORTED_ALGORITHM(0x81000035),
  CA_EPHEMERAL_KEYS_CANT_CREATE(0x81000036),
  CA_SHARED_SECRET_CANT_CREATE(0x81000037),
  CA_NON_MATCHING_AUTH_TOKENS(0x81000038),
  TA_INCORRECT_VERSION(0x81000040),
  TA_CANT_BUILD_CERTIFICATE_CHAIN(0x81000041),
  TA_CANT_FIND_IS_PRIVATE_KEY(0x81000042),
  TA_PUBLIC_KEY_UNSUPPORTED_ALGORITHM(0x81000043),
  TA_SIGNATURE_BUILDING_ERROR(0x81000044),
  TA_INVALID_KEY_ALGORITHM_PARAMETERS(0x81000045),
  AA_PUBLIC_KEY_UNSUPPORTED_ALGORITHM(0x81000050),
  AA_PUBLIC_KEY_INCORRECT_DATA(0x81000051),
  AA_PUBLIC_KEY_INCORRECT_PARAMETERS(0x81000052),
  AA_PUBLIC_KEY_UNDEFINED_PARAMETERS(0x81000053),
  AA_SIGNATURE_INCORRECT_DATA(0x81000054),
  AA_UNSUPPORTED_RECOVERY_SCHEME(0x81000055),
  AA_INCORRECT_TRAILER(0x81000056),
  AA_UNSUPPORTED_DIGEST_ALGORITHM(0x81000057),
  RI_SECTOR_KEY_CANT_FIND(0x81000070),
  RI_SECTOR_KEY_INCORRECT_DATA(0x81000071),
  RI_SECTOR_KEY_INCOMPLETE_DATA(0x81000072),
  CV_CERTIFICATE_MISSING_MANDATORY_DATA_PK(0x81000060),
  CV_CERTIFICATE_PUBLIC_KEY_UNSUPPORTED(0x81000062),
  CV_CERTIFICATE_CHAT_UNSUPPORTED_TERMINAL_TYPE(0x81000063),
  CV_CERTIFICATE_PRIVATE_KEY_UNSUPPORTED(0x8100006),
  CV_CERTIFICATE_PRIVATE_KEY_INVALID_PARAMS(0x81000065),
  CV_CERTIFICATE_INCORRECT_DATA(0x81000160),
  CV_CERTIFICATE_CPI_INCORRECT_DATA(0x81000161),
  CV_CERTIFICATE_CAR_INCORRECT_DATA(0x81000162),
  CV_CERTIFICATE_PUBLIC_KEY_INCORRECT_DATA(0x81000163),
  CV_CERTIFICATE_CHR_INCORRECT_DATA(0x81000164),
  CV_CERTIFICATE_CHAT_INCORRECT_DATA(0x81000165),
  CV_CERTIFICATE_VALID_FROM_INCORRECT_DATA(0x81000166),
  CV_CERTIFICATE_VALID_TO_INCORRECT_DATA(0x81000167),
  CV_CERTIFICATE_EXTENSIONS_INCORRECT_DATA(0x81000168),
  CV_CERTIFICATE_PRIVATE_KEY_INCORRECT_DATA(0x81000169),
  CV_CERTIFICATE_PRIVATE_KEY_MISSING(0x8100016A),
  VDS_UNSUPPORTED_VERSION(0x81000200),
  VDS_ISSUING_COUNTRY_SIZE(0x81000201),
  VDS_ISSUING_COUNTRY_INCORRECT_DATA(0x81000202),
  VDS_SIGNER_CERTIFICATE_SIZE(0x81000203),
  VDS_SIGNER_CERTIFICATE_DATA(0x81000204),
  VDS_SIGNATURE_INCORRECT_DATA(0x81000205),
  VDS_NC_INCORRECT_DATA(0x81000300),
  VDS_NC_MISSING_OR_INCORRECT_DATA(0x81000301),
  VDS_NC_MISSING_OR_INCORRECT_HEADER(0x81000302),
  VDS_NC_MISSING_OR_INCORRECT_TYPE(0x81000303),
  VDS_NC_MISSING_OR_INCORRECT_VERSION(0x81000304),
  VDS_NC_MISSING_OR_INCORRECT_ISSUING_COUNTRY(0x81000305),
  VDS_NC_MISSING_OR_INCORRECT_MESSAGE(0x81000306),
  VDS_NC_MISSING_OR_INCORRECT_SIGNATURE(0x81000307),
  VDS_NC_MISSING_OR_INCORRECT_SIG_ALGORITHM(0x81000308),
  VDS_NC_MISSING_OR_INCORRECT_CERTIFICATE(0x81000309),
  VDS_NC_MISSING_OR_INCORRECT_SIG_VALUE(0x8100030A);

  const LDSParsingErrorCodes(this.value);
  final int value;

  Future<String> getTranslation() async {
    return await _bridge
        .invokeMethod("getTranslation", [runtimeType.toString(), value]);
  }

  static LDSParsingErrorCodes? getByValue(int? i) {
    if (i == null) return null;
    try {
      return LDSParsingErrorCodes.values.firstWhere((x) => x.value == i);
    } catch (_) {
      return LDSParsingErrorCodes.UNKNOWN;
    }
  }
}
